services:
  mongodb-bridgex:
    image: docker.io/bitnami/mongodb:latest
    container_name: mongodb-bridgex
    networks:
      - bridgex-network
    ports:
      - "27018:27017"
    volumes:
      - ./deployment/mongodb/initdb.d/init-mongo.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - mongodb-data:/bitnami/mongodb
      - mongodb-log:/opt/bitnami/mongodb/logs
    env_file:
      - ./deployment/mongodb/.env
    environment:
      - MONGODB_CONFIGURATION_FILE=/opt/bitnami/mongodb/conf/mongodb.conf
      - GLIBC_TUNABLES=glibc.pthread.rseq=0
    # healthcheck:
    #   test: echo 'db.runCommand("ping").ok' | mongo mongodb://admin:admin@localhost:27017/?authSource=admin --quiet
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 30s
    restart: unless-stopped


  # FastAPI Application
  bridgex-rag-api:
    build:
      context: ./src
      dockerfile: Dockerfile.prod
    command: gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app --bind 0.0.0.0:8000
    container_name: bridgex-rag-api
    ports:
      - "8000:8000"
    volumes:
      - bridgex_data:/app/assets
      - bridgex_log:/logs
    env_file:
      - ./src/.env
    networks:
      - bridgex-network
    depends_on:
      - mongodb-bridgex
        # condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-file: "2"
        max-size: "100k"
    restart: unless-stopped


  # Nginx Reverse Proxy
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    restart: unless-stopped
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./deployment/nginx/custom-nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/certbot/conf:/etc/letsencrypt
      - ./deployment/certbot/www:/var/www/certbot
    networks:
      - bridgex-network
    depends_on:
      - bridgex-rag-api

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    networks:
      - bridgex-network
    volumes:
      - ./deployment/certbot/conf:/etc/letsencrypt
      - ./deployment/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  bridgex-network:

volumes:
  mongodb-data:
  mongodb-log:
  bridgex_data:
  bridgex_log:

