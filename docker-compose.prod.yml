
services:
  postgres:
    image: postgres:alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - fastapi-network
    env_file:
      - ./deployment/postgres/.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s


  web:
    build:
      context: ./src
      dockerfile: Dockerfile.prod
    command: ./prestart.sh postgres 5432 gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app --bind 0.0.0.0:8000
    networks:
      - fastapi-network
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    env_file:
      - ./src/.env
    environment:
      - DATABASE_HOSTNAME=postgres
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_PORT=${DATABASE_PORT}

    # restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-file: "1"
        max-size: "100k"

    depends_on:
      - postgres

  nginx:
    image: nginx:stable-alpine
    restart: unless-stopped
    networks:
      - fastapi-network
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./data/nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      # -  /var/run/docker.sock:/var/run/docker.sock:ro
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    networks:
      - fastapi-network
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  fastapi-network:
    driver: bridge
volumes:
  postgres_data: